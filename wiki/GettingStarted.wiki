#summary Getting Started with Origin

= Introduction =
This page describes how to get started with the Origin C++0x libraries.

= Prerequisites =
== Programs and Libraries ==
The Origin C++0x Libraries have two prerequisites:

 * [http://www.cmake.org/ CMake] -- Origin uses CMake as the build system
 * [http://www.boost.org/ Boost] -- Origin _may_ rely on one or more Boost C++ libraries.

Note that the dependence on Boost is typically for convenience of users. Chances are, if you're trying to use Origin, then Boost will have some libraries that you will also find interesting. Best just to have it installed.

== Compilers ==
You also need a compiler that implements the following C++0x features:

 * Move Semantics
 * Auto and Decltype
 * Variadic Templates
 * Constant Expressions
 * Lambda Expressions
 * Uniform Initialization
 * Initializer Lists
 * ...

Your standard library must also provide:

 * Tuples
 * Type Traits
 * ...

Currently, the only known option for compiling the Origin C++0x Libraries is GCC. Notes are given for other compilers below.

=== GCC ===
Must currently be compiled out of SVN. Instructions for acquiring GCC can be found [http://gcc.gnu.org/svn.html here]. Installation instructions can be found [http://gcc.gnu.org/install/ here]. Because Origin tracks GCC's evolution through SVN, we typically only build the C and C++ compilers and skip the bootstrap build.

Note that GCC has a number dependencies itself (e.g., GMP, MPFR, MPC, etc.). We found it useful to install these locally with the prefix `~/local` so they don't collide with your distributions versions. Typically, these only need to be downloaded and compiled once. However, GCC will infrequently change their minimum required version of its dependencies, and you will have to go through this process again.

If you have a lot of custom libraries and programs installed in `~/local` then it may be useful to configure GCC with a different prefix, such as `~/opt`. This leaves all of the programs in `~/local` built with the non-experimental compiler and runtime.

=== Visual C++ ===
Not tested, but VS 2010 does not support variadic templates, this is unlikely.

=== Clang ===
Does not currently include sufficient language support to compile the Origin C++0x libraries.

= Getting the Source Code =
Since Origin does not currently have any releases, the only way to get the source code is to check it out from Subversion. Instructions for doing so can be found here:

http://code.google.com/p/origin/source/checkout


= Building Origin =

== Linux and Mac ==
In order to build Origin on Linux or Mac, you must first install the [#Prerequisites prerequisite software], including an a [#GCC SVN build of GCC].

Origin uses CMake as the build system and relies on a number environment variables to control the build. _Before running CMake_, make sure that the following environment variables are set.

|| *Variable* || *Description* ||
|| `CXX` || Absolute path to the SVN-built g++ executable ||
|| `LD_LIBRARY_PATH` || Paths to the library's for GMP, MPFR, MPC, etc. ||
|| `ORIGIN_ROOT` || The path to the top-level Origin directory ||
|| `BOOST_ROOT` || The path to the top-level Boost directory ||

Note that `LD_LIBRARY_PATH` may be `DYLIB_LIBRARY_PATH` on Mac OS X. Also, `BOOST_ROOT` only needs to be defined if Boost is not installed on a system include path.

== Windows ==
Since Visual C++ is not an option, you would need to build GCC from subversion on Windows. MinGW or Cygwin may be viable solutions, but we haven't tested these. Our best suggestion is to run a Linux distribution as a virtual operating system and then follow the [#Linux_and_Mac build instructions Linux (or Mac)].